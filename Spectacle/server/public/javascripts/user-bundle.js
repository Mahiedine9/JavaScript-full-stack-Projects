/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/user.client.js":
/*!********************************!*\
  !*** ./scripts/user.client.js ***!
  \********************************/
/***/ (() => {

eval("const socket = io();\n\n//socket.emit('identify', userData);\n//socket.on('userData', (user) => {\n//  document.querySelector('#user h1').textContent = `Bonjour ${user.name} !`;\n//});\n\nconst setup = async () => {\n  const userData = await getUser();\n  document.querySelector('#user h1').textContent = `Bonjour ${userData.name} !`;\n  getShows();\n  displayTickets(userData.id);\n  document.getElementById('logout').addEventListener('click', logout);\n};\nwindow.addEventListener('DOMContentLoaded', setup);\nconst getUser2 = async () => {\n  try {\n    if (userData) {\n      // Si les données de l'utilisateur existent déjà, retournez-les directement\n      return userData;\n    } else {\n      // Sinon, effectuez une requête pour récupérer les données de l'utilisateur\n      const requestOptions = {\n        method: 'GET'\n      };\n      const response = await fetch(`/user/me`, requestOptions);\n      if (response.ok) {\n        userData = await response.json();\n        return userData;\n      } else {\n        throw new Error('Erreur lors de la récupération des informations de lutilisateur');\n      }\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n  }\n};\nconst getUser = async () => {\n  try {\n    const requestOptions = {\n      method: 'GET'\n    };\n    const response = await fetch(`/user/me`, requestOptions);\n    if (response.ok) {\n      const userData = await response.json();\n      return userData;\n    } else {\n      throw new Error('Erreur lors de la récupération des informations de lutilisateur');\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n  }\n};\nconst getTickets = async userId => {\n  try {\n    console.log(`${userId}`);\n    const response = await fetch(`/user/tickets/${userId}`, {\n      method: 'GET'\n    });\n    if (response.ok) {\n      const tickets = await response.json();\n      return tickets;\n    } else {\n      throw new Error('Erreur lors de la récupération des tickets de lutilisateur');\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n  }\n};\nconst addTicket = async showId => {\n  try {\n    const userData = await getUser();\n    const userId = userData.id;\n    const ticketResponse = await fetch(`/user/takeTicket/${showId}/${userId}`, {\n      method: 'POST'\n    });\n    if (ticketResponse.ok) {\n      return true;\n    } else {\n      throw new Error('Erreur lors de la prise de ticket');\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n    return false;\n  }\n};\nconst removeTicket = async ticketId => {\n  try {\n    console.log('Ticket ID:', ticketId);\n    const userData = await getUser();\n    const userId = userData.id;\n    const requestOptions = {\n      method: 'DELETE'\n    };\n    const response = await fetch(`/user/removeTicket/${ticketId}/${userId}`, requestOptions);\n    if (response.ok) {\n      return true;\n    } else {\n      throw new Error('Erreur lors de la suppression du ticket');\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n    return false;\n  }\n};\nconst displayTickets = async userId => {\n  const ticketList = document.getElementById('ticket-list');\n  ticketList.textContent = '';\n  try {\n    const user = await getUser();\n    const tickets = await getTickets(user.id);\n    const ticketCounts = {};\n    tickets.forEach(ticket => {\n      if (ticketCounts.hasOwnProperty(ticket.description)) {\n        ticketCounts[ticket.description].push(ticket);\n      } else {\n        ticketCounts[ticket.description] = [ticket];\n      }\n    });\n    for (const [description, ticketArray] of Object.entries(ticketCounts)) {\n      const ticketElem = document.createElement('li');\n      ticketElem.textContent = `${description} (${ticketArray.length})`;\n      ticketArray.forEach(ticket => {\n        const delButton = document.createElement('button');\n        delButton.textContent = 'Supprimer';\n        delButton.addEventListener('click', () => {\n          removeTicket(ticket._id);\n          displayTickets(user.id);\n        });\n        ticketElem.appendChild(delButton);\n      });\n      ticketList.appendChild(ticketElem);\n    }\n  } catch (error) {\n    console.error(`Erreur : ${error.message}`);\n  }\n};\nconst getShows = async () => {\n  const list = document.getElementById('spectacle-list');\n  list.textContent = '';\n  const requestOptions = {\n    method: 'GET'\n  };\n  const response = await fetch('/shows/', requestOptions);\n  const shows = await response.json();\n  shows.forEach(show => list.appendChild(buildShow(show)));\n};\nconst buildShow = show => {\n  const user = getUser();\n  const elem = document.createElement('tr');\n  elem.className = 'show';\n  elem.appendChild(buildTD(show.description, 'description'));\n  elem.appendChild(buildTD(show.places, 'seats'));\n  const buyButton = document.createElement('button');\n  buyButton.textContent = 'buy +1';\n  buyButton.className = 'buy-button';\n  buyButton.addEventListener('click', () => {\n    addTicket(show._id);\n    displayTickets(user.id);\n  });\n  elem.appendChild(buyButton);\n  return elem;\n};\nconst buildTD = (content, className) => {\n  const TDelement = document.createElement('td');\n  TDelement.textContent = content;\n  TDelement.className = className;\n  return TDelement;\n};\nconst logout = async () => {\n  const requestOptions = {\n    method: 'GET'\n  };\n  const response = await fetch(`/access/logout`, requestOptions);\n  if (response.ok) {\n    window.location.href = '/';\n  }\n};\nconst handleError = error => {\n  if (error.redirectTo) window.location.href = error.redirectTo;else console.log(`erreur : ${error.message}`);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./scripts/user.client.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/user.client.js"]();
/******/ 	
/******/ })()
;